{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udd10 Django Trusted Device","text":"<p>Welcome to the official documentation for the Django Trusted Device library.</p> <p>This package provides JWT-based trusted device tracking with per-device session control and security.</p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>\ud83d\udd11 JWT tokens include a unique <code>device_uid</code></li> <li>\ud83c\udf0d Auto-detect IP, region, and city via ipapi.co</li> <li>\ud83d\udee1\ufe0f Per-device session tracking with update/delete restrictions</li> <li>\ud83d\udd04 Custom <code>TokenObtainPair</code>, <code>TokenRefresh</code>, and <code>TokenVerify</code> views</li> <li>\ud83d\udeaa Logout unwanted sessions from the device list</li> <li>\ud83e\uddfc Automatic cleanup, optional global control rules</li> <li>\ud83e\udde9 API-ready \u2013 supports DRF out of the box</li> <li>\u2699\ufe0f Fully customizable via <code>TRUSTED_DEVICE</code> Django settings</li> <li>\ud83d\udeab Rejects refresh/verify from unknown or expired devices</li> </ul> <p>Check the Usage page for integration details.</p>"},{"location":"api/","title":"\ud83d\udcd8 API Reference","text":""},{"location":"api/#token-views","title":"\ud83d\udd10 Token Views","text":"<ul> <li><code>POST /api/token/</code> \u2014 Login</li> <li><code>POST /api/token/refresh/</code> \u2014 Refresh with same device</li> <li><code>POST /api/token/verify/</code> \u2014 Verify device-bound token</li> </ul>"},{"location":"api/#trusteddeviceviewset","title":"\ud83d\udce1 TrustedDeviceViewSet","text":""},{"location":"api/#fields","title":"Fields:","text":"<ul> <li><code>device_uid</code> \u2013 Unique UUID</li> <li><code>user_agent</code>, <code>ip_address</code></li> <li><code>country</code>, <code>region</code>, <code>city</code></li> <li><code>last_seen</code>, <code>created_at</code></li> <li><code>can_update_other_devices</code></li> <li><code>can_delete_other_devices</code></li> </ul>"},{"location":"api/#permissions","title":"\ud83d\udd10 Permissions","text":"<ul> <li>Only authenticated users can access their own devices</li> <li>Global update/delete controlled by settings or user permissions</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#collaboration-contributing","title":"\ud83e\udd1d Collaboration &amp; Contributing","text":"<p>We love community contributions! To collaborate:</p> <ol> <li>Fork the repo and create a feature branch:</li> </ol> <pre><code>git checkout -b feature/my-amazing-idea\n</code></pre> <ol> <li>Follow code style \u2013 run:</li> </ol> <pre><code> make lint  # runs flake8, isort, black\n make format  # formats code with black\n</code></pre> <ol> <li>Write &amp; run tests:</li> </ol> <pre><code>pytest\n</code></pre> <ol> <li>Commit with clear messages and open a Pull Request.    GitHub Actions will lint + test your branch automatically.</li> </ol>"},{"location":"contributing/#discussions-issues","title":"\ud83d\udde3\ufe0f Discussions &amp; Issues","text":"<ul> <li>\ud83d\udca1 Questions / ideas \u2192 GitHub Discussions</li> <li>\ud83d\udc1b Bugs / feature requests \u2192 GitHub Issues</li> </ul>"},{"location":"contributing/#maintainer-workflow","title":"\ud83d\udee0 Maintainer Workflow","text":"<ul> <li>PRs require at least one approval and passing CI</li> <li>We squash\u2011merge to keep history clean</li> <li>Follows Semantic Versioning (<code>MAJOR.MINOR.PATCH</code>), tagged as <code>vX.Y.Z</code></li> </ul>"},{"location":"license/","title":"\ud83d\udcc4 License","text":"<p>MIT License</p> <p>Copyright (c) 2025 Jakhongir Ganiev</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"usage/","title":"\ud83e\udde9 Usage Guide","text":""},{"location":"usage/#simplejwt-configuration","title":"\ud83d\udd10 SimpleJWT configuration","text":"<p>Replace default SimpleJWT serializers with TrustedDevice serializers.:</p> <pre><code>from datetime import timedelta\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'trusted_devices.authentication.TrustedDeviceAuthentication',\n    ),\n}\n\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=60),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=30),\n    \"AUTH_HEADER_TYPES\": (\"Bearer\",),\n    \"TOKEN_OBTAIN_SERIALIZER\": 'trusted_devices.serializers.TrustedDeviceTokenObtainPairSerializer',\n    \"TOKEN_REFRESH_SERIALIZER\": 'trusted_devices.serializers.TrustedDeviceTokenRefreshSerializer',\n    \"TOKEN_VERIFY_SERIALIZER\": 'trusted_devices.serializers.TrustedDeviceTokenVerifySerializer',\n}\n</code></pre>"},{"location":"usage/#token-views","title":"\ud83d\udd10 Token Views","text":"<p>Replace default SimpleJWT views with TrustedDevice views:</p> <pre><code>from trusted_devices.views import (\n    TrustedDeviceTokenObtainPairView,\n    TrustedDeviceTokenRefreshView,\n    TrustedDeviceTokenVerifyView,\n)\n\nurlpatterns = [\n    path('api/token', TrustedDeviceTokenObtainPairView.as_view()),\n    path('api/token/refresh', TrustedDeviceTokenRefreshView.as_view()),\n    path('api/token/verify', TrustedDeviceTokenVerifyView.as_view()),\n]\n````\n\n### \ud83d\udce1 Device Management API\n\nUse provided `TrustedDeviceViewSet`:\n\n```python\nfrom trusted_devices.views import TrustedDeviceViewSet\n\nrouter.register(r'trusted-devices', TrustedDeviceViewSet)\n</code></pre> <p>Endpoints:</p> <ul> <li><code>GET /trusted-devices</code> \u2014 List devices</li> <li><code>DELETE /trusted-devices/{uid}</code> \u2014 Remove session</li> <li><code>PATCH /trusted-devices/{uid}</code> \u2014 Change permissions</li> </ul>"},{"location":"usage/#settings","title":"\u2699\ufe0f Settings","text":"<pre><code>TRUSTED_DEVICE = {\n    \"DELETE_DELAY_MINUTES\": 60 * 24 * 7,\n    \"UPDATE_DELAY_MINUTES\": 60,\n    \"ALLOW_GLOBAL_DELETE\": True,\n    \"ALLOW_GLOBAL_UPDATE\": True,\n}\n</code></pre>"}]}